diff --git a/src/core/postbuild/analyse.js b/src/core/postbuild/analyse.js
index 2484aea4831d0bbb60ef134e6b45a2b679465c73..672df6dce0b53fdb5a0338a833485a47812fffdc 100644
--- a/src/core/postbuild/analyse.js
+++ b/src/core/postbuild/analyse.js
@@ -26,7 +26,8 @@ export default forked(import.meta.url, analyse);
  *   manifest_path: string;
  *   manifest_data: import('types').ManifestData;
  *   server_manifest: import('vite').Manifest;
- *   tracked_features: Record<string, string[]>;
+ *   tracked_features: Record<string, import('types').TrackedFeature[]>;
+ *   additional_entry_points: Record<string, string | undefined | null>
  *   env: Record<string, string>
  * }} opts
  */
@@ -35,6 +36,7 @@ async function analyse({
 	manifest_path,
 	manifest_data,
 	server_manifest,
+	additional_entry_points,
 	tracked_features,
 	env
 }) {
@@ -92,6 +94,14 @@ async function analyse({
 		};
 	}
 
+	for (const [entry, file] of Object.entries(additional_entry_points)) {
+		if (file) {
+			for (const feature of list_features(file, server_manifest, tracked_features)) {
+				check_feature('', {}, entry, feature, config.adapter);
+			}
+		}
+	}
+
 	// analyse routes
 	for (const route of manifest._.routes) {
 		const page =
@@ -121,13 +131,13 @@ async function analyse({
 		const prerender = page?.prerender ?? endpoint?.prerender;
 
 		if (prerender !== true) {
-			for (const feature of list_features(
+			for (const feature of list_route_features(
 				route,
 				manifest_data,
 				server_manifest,
 				tracked_features
 			)) {
-				check_feature(route.id, route_config, feature, config.adapter);
+				check_feature(route.id, route_config, undefined, feature, config.adapter);
 			}
 		}
 
@@ -213,18 +223,13 @@ function analyse_page(layouts, leaf) {
 }
 
 /**
- * @param {import('types').SSRRoute} route
- * @param {import('types').ManifestData} manifest_data
+ * @param {string} entry
  * @param {import('vite').Manifest} server_manifest
- * @param {Record<string, string[]>} tracked_features
+ * @param {Record<string, import('types').TrackedFeature[]>} tracked_features
  */
-function list_features(route, manifest_data, server_manifest, tracked_features) {
+function list_features(entry, server_manifest, tracked_features) {
 	const features = new Set();
 
-	const route_data = /** @type {import('types').RouteData} */ (
-		manifest_data.routes.find((r) => r.id === route.id)
-	);
-
 	/** @param {string} id */
 	function visit(id) {
 		const chunk = server_manifest[id];
@@ -243,20 +248,39 @@ function list_features(route, manifest_data, server_manifest, tracked_features)
 		}
 	}
 
+	visit(entry);
+
+	return Array.from(features);
+}
+
+/**
+ * @param {import('types').SSRRoute} route
+ * @param {import('types').ManifestData} manifest_data
+ * @param {import('vite').Manifest} server_manifest
+ * @param {Record<string, import('types').TrackedFeature[]>} tracked_features
+ */
+function list_route_features(route, manifest_data, server_manifest, tracked_features) {
+	const features = [];
+	const route_data = /** @type {import('types').RouteData} */ (
+		manifest_data.routes.find((r) => r.id === route.id)
+	);
+
 	let page_node = route_data?.leaf;
 	while (page_node) {
-		if (page_node.server) visit(page_node.server);
+		if (page_node.server) {
+			features.push(...list_features(page_node.server, server_manifest, tracked_features));
+		}
 		page_node = page_node.parent ?? null;
 	}
 
 	if (route_data.endpoint) {
-		visit(route_data.endpoint.file);
+		features.push(...list_features(route_data.endpoint.file, server_manifest, tracked_features));
 	}
 
 	if (manifest_data.hooks.server) {
 		// TODO if hooks.server.js imports `read`, it will be in the entry chunk
 		// we don't currently account for that case
-		visit(manifest_data.hooks.server);
+		features.push(...list_features(manifest_data.hooks.server, server_manifest, tracked_features));
 	}
 
 	return Array.from(features);
diff --git a/src/core/postbuild/prerender.js b/src/core/postbuild/prerender.js
index 7c84269e3306ceaae789f5f739dd90e3c744239c..375651190ae07dc597dcef90a5675d45de998377 100644
--- a/src/core/postbuild/prerender.js
+++ b/src/core/postbuild/prerender.js
@@ -117,7 +117,10 @@ async function prerender({ hash, out, manifest_path, metadata, verbose, env }) {
 		return { prerendered, prerender_map };
 	}
 
-	const emulator = await config.adapter?.emulate?.();
+	const emulator = await config.adapter?.emulate?.({
+		importEntryPoint: (entry) =>
+			import(pathToFileURL(`${config.outDir}/output/server/adapter/${entry}.js`).href)
+	});
 
 	/** @type {import('types').Logger} */
 	const log = logger({ verbose });
diff --git a/src/exports/index.js b/src/exports/index.js
index 3b69f24de40e3c821f88ee7f44014ad806ee8481..99be90ac87d69df6740da608d6ff37ca859b08d1 100644
--- a/src/exports/index.js
+++ b/src/exports/index.js
@@ -1,5 +1,13 @@
 import { HttpError, Redirect, ActionFailure } from '../runtime/control.js';
 import { BROWSER, DEV } from 'esm-env';
+import {
+	add_data_suffix,
+	add_resolution_suffix,
+	has_data_suffix,
+	has_resolution_suffix,
+	strip_data_suffix,
+	strip_resolution_suffix
+} from '../runtime/pathname.js';
 
 export { VERSION } from '../version.js';
 
@@ -207,3 +215,44 @@ export function fail(status, data) {
 export function isActionFailure(e) {
 	return e instanceof ActionFailure;
 }
+
+/**
+ * Strips possible SvelteKit-internal suffixes from the URL pathname.
+ * Returns the normalized URL as well as a method for adding the potential suffix back
+ * based on a new pathname (possibly including search) or URL.
+ * ```js
+ * import { normalizeUrl } from '@sveltejs/kit';
+ *
+ * const { url, denormalize } = normalizeUrl('/blog/post/__data.json');
+ * console.log(url.pathname); // /blog/post
+ * console.log(denormalize('/blog/post/a')); // /blog/post/a/__data.json
+ * ```
+ * @param {URL | string} url
+ * @returns {{ url: URL, neededNormalization: boolean, denormalize: (url?: string | URL) => URL }}
+ */
+export function normalizeUrl(url) {
+	url = new URL(url, 'http://internal');
+
+	const is_route_resolution = has_resolution_suffix(url.pathname);
+	const is_data_request = has_data_suffix(url.pathname);
+
+	if (is_route_resolution) {
+		url.pathname = strip_resolution_suffix(url.pathname);
+	} else if (is_data_request) {
+		url.pathname = strip_data_suffix(url.pathname);
+	}
+
+	return {
+		url,
+		neededNormalization: is_data_request || is_route_resolution,
+		denormalize: (new_url = url) => {
+			new_url = new URL(new_url, url);
+			if (is_route_resolution) {
+				new_url.pathname = add_resolution_suffix(new_url.pathname);
+			} else if (is_data_request) {
+				new_url.pathname = add_data_suffix(new_url.pathname);
+			}
+			return new_url;
+		}
+	};
+}
diff --git a/src/exports/node/index.js b/src/exports/node/index.js
index a69b7ae6d906745f9a3a6e2b00f5e7134f4fee77..e0753d673c3cc56917a08c2720c9e14488223274 100644
--- a/src/exports/node/index.js
+++ b/src/exports/node/index.js
@@ -96,17 +96,13 @@ function get_raw_body(req, body_size_limit) {
 }
 
 /**
- * @param {{
- *   request: import('http').IncomingMessage;
- *   base: string;
- *   bodySizeLimit?: number;
- * }} options
- * @returns {Promise<Request>}
+ * Turns the Node request headers into a `Headers` instance
+ * @param {import('http').IncomingMessage} request
+ * @returns {Headers}
  */
-// TODO 3.0 make the signature synchronous?
-// eslint-disable-next-line @typescript-eslint/require-await
-export async function getRequest({ request, base, bodySizeLimit }) {
+export function getRequestHeaders(request) {
 	let headers = /** @type {Record<string, string>} */ (request.headers);
+
 	if (request.httpVersionMajor >= 2) {
 		// the Request constructor rejects headers with ':' in the name
 		headers = Object.assign({}, headers);
@@ -120,11 +116,25 @@ export async function getRequest({ request, base, bodySizeLimit }) {
 		delete headers[':scheme'];
 	}
 
+	return new Headers(Object.entries(headers));
+}
+
+/**
+ * @param {{
+ *   request: import('http').IncomingMessage;
+ *   base: string;
+ *   bodySizeLimit?: number;
+ * }} options
+ * @returns {Promise<Request>}
+ */
+// TODO 3.0 make the signature synchronous?
+// eslint-disable-next-line @typescript-eslint/require-await
+export async function getRequest({ request, base, bodySizeLimit }) {
 	return new Request(base + request.url, {
 		// @ts-expect-error
 		duplex: 'half',
 		method: request.method,
-		headers: Object.entries(headers),
+		headers: getRequestHeaders(request),
 		body:
 			request.method === 'GET' || request.method === 'HEAD'
 				? undefined
diff --git a/src/exports/public.d.ts b/src/exports/public.d.ts
index f25cc225e1949bcd338b7e55bf83f750108a40ab..71dcf7bda18dbeadc9f56f5c26822ed2005dcdae 100644
--- a/src/exports/public.d.ts
+++ b/src/exports/public.d.ts
@@ -19,6 +19,7 @@ import {
 } from '../types/private.js';
 import { BuildData, SSRNodeLoader, SSRRoute, ValidatedConfig } from 'types';
 import type { PluginOptions } from '@sveltejs/vite-plugin-svelte';
+import type { IncomingMessage, ServerResponse } from 'node:http';
 
 export { PrerenderOption } from '../types/private.js';
 
@@ -42,14 +43,26 @@ export interface Adapter {
 		/**
 		 * Test support for `read` from `$app/server`
 		 * @param config The merged route config
+		 * @param route The route and its ID
+		 * @param entry Name of the entry point, in case this was called from an additional entry point (route and config are irrelevant in this case)
 		 */
-		read?: (details: { config: any; route: { id: string } }) => boolean;
+		read?: (details: { config: any; route: { id: string }; entry?: string }) => boolean;
 	};
 	/**
 	 * Creates an `Emulator`, which allows the adapter to influence the environment
 	 * during dev, build and prerendering
 	 */
-	emulate?: () => MaybePromise<Emulator>;
+	emulate?: (helpers: {
+		/** Allows to import an entry point defined within `additionalEntryPoints` by referencing its name */
+		importEntryPoint: (name: string) => Promise<any>;
+	}) => MaybePromise<Emulator>;
+	/**
+	 * An object with additional entry points for Vite to consider during compilation.
+	 * The key is the name of the entry point that will be later available at `${builder.getServerDirectory()}/adapter/<name>.js`,
+	 * the value is the relative path to the entry point file.
+	 * This is useful for adapters that want to generate separate bundles for e.g. middleware.
+	 */
+	additionalEntryPoints?: Record<string, string | undefined | null>;
 }
 
 export type LoadProperties<input extends Record<string, any> | void> = input extends void
@@ -275,6 +288,16 @@ export interface Emulator {
 	 * and returns an `App.Platform` object
 	 */
 	platform?(details: { config: any; prerender: PrerenderOption }): MaybePromise<App.Platform>;
+	/**
+	 * Runs before every request that would hit the SvelteKit runtime and before requests to static assets in dev mode.
+	 * Can be used to replicate middleware behavior in dev mode.
+	 * Implementation note: You either have to call `next()` to pass on the request/response, or `res.end()` to finish the request
+	 */
+	beforeRequest?: (
+		req: IncomingMessage & { originalUrl?: string },
+		res: ServerResponse,
+		next: () => void
+	) => MaybePromise<void>;
 }
 
 export interface KitConfig {
@@ -1295,12 +1318,25 @@ export interface RouteDefinition<Config = any> {
 	config: Config;
 }
 
+/**
+ * Represents the SvelteKit server runtime. Adapters should use this via `${builder.getServerDirectory()}/index.js` to create a server to send requests to.
+ */
 export class Server {
 	constructor(manifest: SSRManifest);
 	init(options: ServerInitOptions): Promise<void>;
 	respond(request: Request, options: RequestOptions): Promise<Response>;
 }
 
+/**
+ * Similar to Server#init. Can be used via `${builder.getServerDirectory()}/init.js` for other entry points that don't start the server but still need to setup the environment.
+ */
+export function initServer(options: {
+	/** Required for `$env/*` to work */
+	env: { env: Record<string, string>; public_prefix: string; private_prefix: string };
+	/** Required for the `read` export from `$app/server` to work */
+	read?: { read: (file: string) => ReadableStream; manifest: SSRManifest };
+}): void;
+
 export interface ServerInitOptions {
 	/** A map of environment variables */
 	env: Record<string, string>;
diff --git a/src/exports/vite/dev/index.js b/src/exports/vite/dev/index.js
index 39f4ef41e0cd4ab8adabb3cfdb3047a87a98265a..20d6300daa16259ece1c6028d7eba1b38b9a018c 100644
--- a/src/exports/vite/dev/index.js
+++ b/src/exports/vite/dev/index.js
@@ -37,9 +37,37 @@ export async function dev(vite, vite_config, svelte_config) {
 
 	globalThis.__SVELTEKIT_TRACK__ = (label) => {
 		const context = async_local_storage.getStore();
-		if (!context || context.prerender === true) return;
 
-		check_feature(context.event.route.id, context.config, label, svelte_config.kit.adapter);
+		if (!context) {
+			const files = new Error().stack
+				?.split('\n')
+				.map((line) => line.match(/\((.*?):\d+:\d+\)/)?.[1])
+				.map((file) => file?.replace(cwd.replaceAll('\\', '/') + '/', ''));
+
+			for (const [entry, file] of Object.entries(additional_entry_points)) {
+				if (files?.includes(file ?? undefined)) {
+					check_feature(
+						'',
+						{},
+						entry,
+						/** @type {import('types').TrackedFeature} */ (label),
+						svelte_config.kit.adapter
+					);
+				}
+			}
+
+			return;
+		} else if (context.prerender === true) {
+			return;
+		}
+
+		check_feature(
+			context.event.route.id,
+			context.config,
+			undefined,
+			/** @type {import('types').TrackedFeature} */ (label),
+			svelte_config.kit.adapter
+		);
 	};
 
 	const fetch = globalThis.fetch;
@@ -420,7 +448,25 @@ export async function dev(vite, vite_config, svelte_config) {
 		return ws_send.apply(vite.ws, args);
 	};
 
-	vite.middlewares.use((req, res, next) => {
+	const env = loadEnv(vite_config.mode, svelte_config.kit.env.dir, '');
+	const additional_entry_points = svelte_config.kit.adapter?.additionalEntryPoints ?? {};
+	const emulator = await svelte_config.kit.adapter?.emulate?.({
+		importEntryPoint: (entry) => {
+			const file = additional_entry_points[entry];
+			if (!file) {
+				throw new Error(
+					`Entry point '${entry}' not found: ` +
+						'Adapters can only import entry points defined previously through additionalEntryPoints'
+				);
+			}
+			return vite.ssrLoadModule(file);
+		}
+	});
+
+	/**
+	 * @param {import('node:http').IncomingMessage} req
+	 */
+	function get_asset_uri(req) {
 		const base = `${vite.config.server.https ? 'https' : 'http'}://${
 			req.headers[':authority'] || req.headers.host
 		}`;
@@ -433,18 +479,65 @@ export async function dev(vite, vite_config, svelte_config) {
 
 			if (fs.existsSync(file) && !fs.statSync(file).isDirectory()) {
 				if (has_correct_case(file, svelte_config.kit.files.assets)) {
-					req.url = encodeURI(pathname); // don't need query/hash
-					asset_server(req, res);
-					return;
+					return encodeURI(pathname); // don't need query/hash
 				}
 			}
 		}
+	}
 
-		next();
+	// adapter-provided middleware
+	vite.middlewares.use(async (req, res, next) => {
+		if (!emulator?.beforeRequest) return next();
+		if (
+			req.url?.startsWith('/@fs/') ||
+			req.url?.startsWith('/@vite/') ||
+			req.url?.includes('virtual:')
+		) {
+			return next();
+		}
+
+		try {
+			const base = `${vite.config.server.https ? 'https' : 'http'}://${
+				req.headers[':authority'] || req.headers.host
+			}`;
+			const decoded = decodeURI(new URL(base + req.url).pathname); // this can fail when req.url is malformed, hence the early try-catch
+			const file = posixify(path.resolve(decoded.slice(svelte_config.kit.paths.base.length + 1)));
+			const is_file = fs.existsSync(file) && !fs.statSync(file).isDirectory();
+			const is_static_asset = !!get_asset_uri(req);
+
+			if (is_file && !is_static_asset) {
+				return next();
+			}
+
+			// Vite's base middleware strips out the base path. Restore it for the duration of beforeRequest
+			const prev_url = req.url;
+			req.url = req.originalUrl;
+			const _next = () => {
+				if (prev_url !== req.url) {
+					req.originalUrl = req.url;
+					req.url = /** @type {string} */ (req.url).slice(svelte_config.kit.paths.base.length);
+				} else {
+					req.url = prev_url;
+				}
+				return next();
+			};
+			return emulator.beforeRequest(req, res, _next);
+		} catch (e) {
+			const error = coalesce_to_error(e);
+			res.statusCode = 500;
+			res.end(fix_stack_trace(error));
+		}
 	});
 
-	const env = loadEnv(vite_config.mode, svelte_config.kit.env.dir, '');
-	const emulator = await svelte_config.kit.adapter?.emulate?.();
+	vite.middlewares.use((req, res, next) => {
+		const asset_uri = get_asset_uri(req);
+		if (asset_uri) {
+			req.url = asset_uri;
+			return asset_server(req, res);
+		}
+
+		next();
+	});
 
 	return () => {
 		const serve_static_middleware = vite.middlewares.stack.find(
@@ -465,7 +558,7 @@ export async function dev(vite, vite_config, svelte_config) {
 					req.headers[':authority'] || req.headers.host
 				}`;
 
-				const decoded = decodeURI(new URL(base + req.url).pathname);
+				const decoded = decodeURI(new URL(base + req.url).pathname); // this can fail when req.url is malformed, hence the early try-catch
 				const file = posixify(path.resolve(decoded.slice(svelte_config.kit.paths.base.length + 1)));
 				const is_file = fs.existsSync(file) && !fs.statSync(file).isDirectory();
 				const allowed =
diff --git a/src/exports/vite/index.js b/src/exports/vite/index.js
index 4885d000ec1594440562da44148b4dfdcb7367a1..224fb7c075180bc732ed60a5d17e5c1d6d88ec48 100644
--- a/src/exports/vite/index.js
+++ b/src/exports/vite/index.js
@@ -212,10 +212,13 @@ async function kit({ svelte_config }) {
 	/**
 	 * A map showing which features (such as `$app/server:read`) are defined
 	 * in which chunks, so that we can later determine which routes use which features
-	 * @type {Record<string, string[]>}
+	 * @type {Record<string, import('types').TrackedFeature[]>}
 	 */
 	const tracked_features = {};
 
+	/** Adapter-provided additional entry points */
+	const additional_entry_points = kit.adapter?.additionalEntryPoints ?? {};
+
 	const sourcemapIgnoreList = /** @param {string} relative_path */ (relative_path) =>
 		relative_path.includes('node_modules') || relative_path.includes(kit.outDir);
 
@@ -599,8 +602,15 @@ Tips:
 
 				if (ssr) {
 					input.index = `${runtime_directory}/server/index.js`;
+					input.init = `${runtime_directory}/server/init.js`;
 					input.internal = `${kit.outDir}/generated/server/internal.js`;
 
+					for (const [entry, file] of Object.entries(additional_entry_points)) {
+						if (file) {
+							input[`adapter/${entry}`] = file;
+						}
+					}
+
 					// add entry points for every endpoint...
 					manifest_data.routes.forEach((route) => {
 						if (route.endpoint) {
@@ -825,6 +835,7 @@ Tips:
 					manifest_data,
 					server_manifest,
 					tracked_features,
+					additional_entry_points,
 					env: { ...env.private, ...env.public }
 				});
 
diff --git a/src/exports/vite/preview/index.js b/src/exports/vite/preview/index.js
index 0342e718c75c9b333c1b6bc0900e1abdfbabf924..359aedbc30db7c5e5c6019fa38eb455feb899834 100644
--- a/src/exports/vite/preview/index.js
+++ b/src/exports/vite/preview/index.js
@@ -51,7 +51,9 @@ export async function preview(vite, vite_config, svelte_config) {
 		read: (file) => createReadableStream(`${dir}/${file}`)
 	});
 
-	const emulator = await svelte_config.kit.adapter?.emulate?.();
+	const emulator = await svelte_config.kit.adapter?.emulate?.({
+		importEntryPoint: (entry) => import(pathToFileURL(join(dir, `adapter/${entry}.js`)).href)
+	});
 
 	return () => {
 		// Remove the base middleware. It screws with the URL.
@@ -66,6 +68,17 @@ export async function preview(vite, vite_config, svelte_config) {
 			}
 		}
 
+		// adapter-provided middleware
+		vite.middlewares.use(async (req, res, next) => {
+			if (!emulator?.beforeRequest) return next();
+
+			const { pathname } = new URL(/** @type {string} */ (req.url), 'http://dummy');
+
+			if (pathname.startsWith(`/${svelte_config.kit.appDir}/immutable`)) return next();
+
+			return emulator.beforeRequest(req, res, next);
+		});
+
 		// generated client assets and the contents of `static`
 		vite.middlewares.use(
 			scoped(
diff --git a/src/runtime/server/index.js b/src/runtime/server/index.js
index a2740a8e6aa475376d6017dce94c800287ab378e..b71829279436eb79e549e31c40ae87155afbaf71 100644
--- a/src/runtime/server/index.js
+++ b/src/runtime/server/index.js
@@ -1,19 +1,8 @@
-import { respond } from './respond.js';
-import { set_private_env, set_public_env, set_safe_public_env } from '../shared-server.js';
-import { options, get_hooks } from '__SERVER__/internal.js';
+import { get_hooks, options } from '__SERVER__/internal.js';
+import { set_manifest } from '__sveltekit/server';
 import { DEV } from 'esm-env';
-import { filter_private_env, filter_public_env } from '../../utils/env.js';
-import { prerendering } from '__sveltekit/environment';
-import { set_read_implementation, set_manifest } from '__sveltekit/server';
-
-/** @type {ProxyHandler<{ type: 'public' | 'private' }>} */
-const prerender_env_handler = {
-	get({ type }, prop) {
-		throw new Error(
-			`Cannot read values from $env/dynamic/${type} while prerendering (attempted to read env.${prop.toString()}). Use $env/static/${type} instead`
-		);
-	}
-};
+import { initServer } from './init.js';
+import { respond } from './respond.js';
 
 /** @type {Promise<any>} */
 let init_promise;
@@ -40,33 +29,17 @@ export class Server {
 	 *   read?: (file: string) => ReadableStream;
 	 * }} opts
 	 */
-	async init({ env, read }) {
-		// Take care: Some adapters may have to call `Server.init` per-request to set env vars,
-		// so anything that shouldn't be rerun should be wrapped in an `if` block to make sure it hasn't
-		// been done already.
-
-		// set env, in case it's used in initialisation
-		const prefixes = {
-			public_prefix: this.#options.env_public_prefix,
-			private_prefix: this.#options.env_private_prefix
-		};
-
-		const private_env = filter_private_env(env, prefixes);
-		const public_env = filter_public_env(env, prefixes);
-
-		set_private_env(
-			prerendering ? new Proxy({ type: 'private' }, prerender_env_handler) : private_env
-		);
-		set_public_env(
-			prerendering ? new Proxy({ type: 'public' }, prerender_env_handler) : public_env
-		);
-		set_safe_public_env(public_env);
-
-		if (read) {
-			set_read_implementation(read);
-		}
+	async init(opts) {
+		initServer({
+			env: {
+				private_prefix: options.env_private_prefix,
+				public_prefix: options.env_public_prefix,
+				env: opts.env
+			},
+			read: opts.read && { read: opts.read, manifest: this.#manifest }
+		});
 
-		// During DEV and for some adapters this function might be called in quick succession,
+		// During DEV and for some adapters this function might be called in quick succession (per-request),
 		// so we need to make sure we're not invoking this logic (most notably the init hook) multiple times
 		await (init_promise ??= (async () => {
 			try {
diff --git a/src/runtime/server/init.js b/src/runtime/server/init.js
new file mode 100644
index 0000000000000000000000000000000000000000..6ee07276e10b18a451169af3e7b1ff92073fc6eb
--- /dev/null
+++ b/src/runtime/server/init.js
@@ -0,0 +1,42 @@
+import { prerendering } from '__sveltekit/environment';
+import { set_manifest, set_read_implementation } from '__sveltekit/server';
+import { filter_private_env, filter_public_env } from '../../utils/env.js';
+import { set_private_env, set_public_env, set_safe_public_env } from '../shared-server.js';
+
+/**
+ * Separate, more lightweight init in case an adapter entry point doesn't need the whole server
+ * @param {{
+ *   env: { public_prefix: string; private_prefix: string; env: Record<string, string>; };
+ *   read?: { read: (file: string) => ReadableStream; manifest: import('@sveltejs/kit').SSRManifest; };
+ * }} options
+ */
+export function initServer({ env, read }) {
+	// set env, in case it's used in initialisation
+	const prefixes = {
+		public_prefix: env.public_prefix,
+		private_prefix: env.private_prefix
+	};
+
+	const private_env = filter_private_env(env.env, prefixes);
+	const public_env = filter_public_env(env.env, prefixes);
+
+	set_private_env(
+		prerendering ? new Proxy({ type: 'private' }, prerender_env_handler) : private_env
+	);
+	set_public_env(prerendering ? new Proxy({ type: 'public' }, prerender_env_handler) : public_env);
+	set_safe_public_env(public_env);
+
+	if (read) {
+		set_read_implementation(read.read);
+		set_manifest(read.manifest);
+	}
+}
+
+/** @type {ProxyHandler<{ type: 'public' | 'private' }>} */
+const prerender_env_handler = {
+	get({ type }, prop) {
+		throw new Error(
+			`Cannot read values from $env/dynamic/${type} while prerendering (attempted to read env.${prop.toString()}). Use $env/static/${type} instead`
+		);
+	}
+};
diff --git a/src/types/private.d.ts b/src/types/private.d.ts
index 0207a8f5f05b002e28e75a77aa8e2b0480c0e709..3237e26108f160e59ebbbf67cef79c55092cbef3 100644
--- a/src/types/private.d.ts
+++ b/src/types/private.d.ts
@@ -155,6 +155,8 @@ export interface Logger {
 
 export type MaybePromise<T> = T | Promise<T>;
 
+export type TrackedFeature = '$app/server:read';
+
 export interface Prerendered {
 	/**
 	 * A map of `path` to `{ file }` objects, where a path like `/foo` corresponds to `foo.html` and a path like `/bar/` corresponds to `bar/index.html`.
diff --git a/src/utils/features.js b/src/utils/features.js
index 4a8530d22bbb89ecf276ae1f7ba48522cb0f6111..d57bf018e2e09ce803636da474e0f04c0cbbecdc 100644
--- a/src/utils/features.js
+++ b/src/utils/features.js
@@ -1,22 +1,24 @@
 /**
  * @param {string} route_id
  * @param {any} config
- * @param {string} feature
+ * @param {string | undefined} entry
+ * @param {import('types').TrackedFeature} feature
  * @param {import('@sveltejs/kit').Adapter | undefined} adapter
  */
-export function check_feature(route_id, config, feature, adapter) {
+export function check_feature(route_id, config, entry, feature, adapter) {
 	if (!adapter) return;
 
 	switch (feature) {
 		case '$app/server:read': {
 			const supported = adapter.supports?.read?.({
 				route: { id: route_id },
+				entry,
 				config
 			});
 
 			if (!supported) {
 				throw new Error(
-					`Cannot use \`read\` from \`$app/server\` in ${route_id} when using ${adapter.name}. Please ensure that your adapter is up to date and supports this feature.`
+					`Cannot use \`read\` from \`$app/server\` in ${route_id ?? entry} when using ${adapter.name}. Please ensure that your adapter is up to date and supports this feature.`
 				);
 			}
 		}
diff --git a/src/version.js b/src/version.js
index 5154fdbae3c6a3839d28d2e571de7f6ab6459b44..d43569b34c313750054189c1232a30755ecb4f93 100644
--- a/src/version.js
+++ b/src/version.js
@@ -1,4 +1,4 @@
 // generated during release, do not modify
 
 /** @type {string} */
-export const VERSION = '2.17.2';
+export const VERSION = '2.18.0';
diff --git a/types/index.d.ts b/types/index.d.ts
index f164abc09c1d681042443cd0270bf856b90c7aef..62a34b7f1c91f8733f9313d628104c6f112ef273 100644
--- a/types/index.d.ts
+++ b/types/index.d.ts
@@ -4,6 +4,7 @@
 declare module '@sveltejs/kit' {
 	import type { CompileOptions } from 'svelte/compiler';
 	import type { PluginOptions } from '@sveltejs/vite-plugin-svelte';
+	import type { IncomingMessage, ServerResponse } from 'node:http';
 	/**
 	 * [Adapters](https://svelte.dev/docs/kit/adapters) are responsible for taking the production build and turning it into something that can be deployed to a platform of your choosing.
 	 */
@@ -24,14 +25,26 @@ declare module '@sveltejs/kit' {
 			/**
 			 * Test support for `read` from `$app/server`
 			 * @param config The merged route config
+			 * @param route The route and its ID
+			 * @param entry Name of the entry point, in case this was called from an additional entry point (route and config are irrelevant in this case)
 			 */
-			read?: (details: { config: any; route: { id: string } }) => boolean;
+			read?: (details: { config: any; route: { id: string }; entry?: string }) => boolean;
 		};
 		/**
 		 * Creates an `Emulator`, which allows the adapter to influence the environment
 		 * during dev, build and prerendering
 		 */
-		emulate?: () => MaybePromise<Emulator>;
+		emulate?: (helpers: {
+			/** Allows to import an entry point defined within `additionalEntryPoints` by referencing its name */
+			importEntryPoint: (name: string) => Promise<any>;
+		}) => MaybePromise<Emulator>;
+		/**
+		 * An object with additional entry points for Vite to consider during compilation.
+		 * The key is the name of the entry point that will be later available at `${builder.getServerDirectory()}/adapter/<name>.js`,
+		 * the value is the relative path to the entry point file.
+		 * This is useful for adapters that want to generate separate bundles for e.g. middleware.
+		 */
+		additionalEntryPoints?: Record<string, string | undefined | null>;
 	}
 
 	export type LoadProperties<input extends Record<string, any> | void> = input extends void
@@ -257,6 +270,16 @@ declare module '@sveltejs/kit' {
 		 * and returns an `App.Platform` object
 		 */
 		platform?(details: { config: any; prerender: PrerenderOption }): MaybePromise<App.Platform>;
+		/**
+		 * Runs before every request that would hit the SvelteKit runtime and before requests to static assets in dev mode.
+		 * Can be used to replicate middleware behavior in dev mode.
+		 * Implementation note: You either have to call `next()` to pass on the request/response, or `res.end()` to finish the request
+		 */
+		beforeRequest?: (
+			req: IncomingMessage & { originalUrl?: string },
+			res: ServerResponse,
+			next: () => void
+		) => MaybePromise<void>;
 	}
 
 	export interface KitConfig {
@@ -1277,12 +1300,25 @@ declare module '@sveltejs/kit' {
 		config: Config;
 	}
 
+	/**
+	 * Represents the SvelteKit server runtime. Adapters should use this via `${builder.getServerDirectory()}/index.js` to create a server to send requests to.
+	 */
 	export class Server {
 		constructor(manifest: SSRManifest);
 		init(options: ServerInitOptions): Promise<void>;
 		respond(request: Request, options: RequestOptions): Promise<Response>;
 	}
 
+	/**
+	 * Similar to Server#init. Can be used via `${builder.getServerDirectory()}/init.js` for other entry points that don't start the server but still need to setup the environment.
+	 */
+	export function initServer(options: {
+		/** Required for `$env/*` to work */
+		env: { env: Record<string, string>; public_prefix: string; private_prefix: string };
+		/** Required for the `read` export from `$app/server` to work */
+		read?: { read: (file: string) => ReadableStream; manifest: SSRManifest };
+	}): void;
+
 	export interface ServerInitOptions {
 		/** A map of environment variables */
 		env: Record<string, string>;
@@ -1996,6 +2032,23 @@ declare module '@sveltejs/kit' {
 	 * @param e The object to check.
 	 * */
 	export function isActionFailure(e: unknown): e is ActionFailure;
+	/**
+	 * Strips possible SvelteKit-internal suffixes from the URL pathname.
+	 * Returns the normalized URL as well as a method for adding the potential suffix back
+	 * based on a new pathname (possibly including search) or URL.
+	 * ```js
+	 * import { normalizeUrl } from '@sveltejs/kit';
+	 *
+	 * const { url, denormalize } = normalizeUrl('/blog/post/__data.json');
+	 * console.log(url.pathname); // /blog/post
+	 * console.log(denormalize('/blog/post/a')); // /blog/post/a/__data.json
+	 * ```
+	 * */
+	export function normalizeUrl(url: URL | string): {
+		url: URL;
+		neededNormalization: boolean;
+		denormalize: (url?: string | URL) => URL;
+	};
 	export type LessThan<TNumber extends number, TArray extends any[] = []> = TNumber extends TArray["length"] ? TArray[number] : LessThan<TNumber, [...TArray, TArray["length"]]>;
 	export type NumericRange<TStart extends number, TEnd extends number> = Exclude<TEnd | LessThan<TEnd>, LessThan<TStart>>;
 	export const VERSION: string;
@@ -2095,6 +2148,11 @@ declare module '@sveltejs/kit/hooks' {
 }
 
 declare module '@sveltejs/kit/node' {
+	/**
+	 * Turns the Node request headers into a `Headers` instance
+	 * */
+	export function getRequestHeaders(request: import("http").IncomingMessage): Headers;
+
 	export function getRequest({ request, base, bodySizeLimit }: {
 		request: import("http").IncomingMessage;
 		base: string;
diff --git a/types/index.d.ts.map b/types/index.d.ts.map
index f89c99f5274ecddf5c8949a4ff36cfec96453438..7879b1b210d3c7d7a59374faddccd90d781976b6 100644
--- a/types/index.d.ts.map
+++ b/types/index.d.ts.map
@@ -36,6 +36,7 @@
 		"ResolveOptions",
 		"RouteDefinition",
 		"Server",
+		"initServer",
 		"ServerInitOptions",
 		"SSRManifest",
 		"ServerLoad",
@@ -88,8 +89,10 @@
 		"json",
 		"text",
 		"isActionFailure",
+		"normalizeUrl",
 		"VERSION",
 		"sequence",
+		"getRequestHeaders",
 		"getRequest",
 		"setResponse",
 		"createReadableStream",
@@ -160,6 +163,6 @@
 		null,
 		null
 	],
-	"mappings": "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",
+	"mappings": "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",
 	"ignoreList": []
 }
