diff --git a/files/middleware.js b/files/middleware.js
new file mode 100644
index 0000000000000000000000000000000000000000..89f2f51f772939294df0e8b1ed7556a6fb7f471d
--- /dev/null
+++ b/files/middleware.js
@@ -0,0 +1,24 @@
+import { middleware as user_middleware } from 'MIDDLEWARE';
+import { call_middleware } from 'CALL_MIDDLEWARE';
+
+/**
+ * @param {Request} request
+ * @param {import('@netlify/edge-functions').Context} context
+ */
+export default async function middleware(request, context) {
+	const result = await call_middleware(request, user_middleware);
+
+	if (result instanceof Response) return result;
+
+	const has_additional_headers =
+		result.request_headers.size > 0 || result.response_headers.size > 0;
+
+	if (result.did_reroute && !has_additional_headers) {
+		// Fast path
+		return new URL(result.request.url);
+	} else {
+		const response = await context.next(result.request);
+		result.add_response_headers(response);
+		return response;
+	}
+}
diff --git a/index.js b/index.js
index 034acd70ab94405d83f203bd4f9fafd197cb7222..5b81c195c8ae437cafd2f4854b481ae5213583db 100644
--- a/index.js
+++ b/index.js
@@ -1,6 +1,6 @@
 import { appendFileSync, existsSync, readdirSync, readFileSync, writeFileSync } from 'node:fs';
 import { dirname, join, resolve, posix } from 'node:path';
-import { fileURLToPath } from 'node:url';
+import { fileURLToPath, pathToFileURL } from 'node:url';
 import { builtinModules } from 'node:module';
 import process from 'node:process';
 import esbuild from 'esbuild';
@@ -99,6 +99,8 @@ export default function ({ split = false, edge = edge_set_in_env_var } = {}) {
 			} else {
 				generate_lambda_functions({ builder, split, publish });
 			}
+
+			await generate_middleware(builder);
 		},
 
 		supports: {
@@ -111,10 +113,12 @@ export default function ({ split = false, edge = edge_set_in_env_var } = {}) {
 				}
 
 				return true;
-			}
+			},
+			middleware: () => true
 		}
 	};
 }
+
 /**
  * @param { object } params
  * @param {import('@sveltejs/kit').Builder} params.builder
@@ -127,6 +131,7 @@ async function generate_edge_functions({ builder }) {
 	builder.mkdirp('.netlify/edge-functions');
 
 	builder.log.minor('Generating Edge Function...');
+
 	const relativePath = posix.relative(tmp, builder.getServerDirectory());
 
 	builder.copy(`${files}/edge.js`, `${tmp}/entry.js`, {
@@ -136,14 +141,72 @@ async function generate_edge_functions({ builder }) {
 		}
 	});
 
-	const manifest = builder.generateManifest({
-		relativePath
+	await bundle_edge_function({ builder, name: 'render', excludedPaths: builder.prerendered.paths });
+}
+
+/**
+ * @param {import('@sveltejs/kit').Builder} builder
+ */
+async function generate_middleware(builder) {
+	if (!existsSync(`${builder.getServerDirectory()}/middleware.js`)) return;
+
+	builder.log.minor('Generating SvelteKit middleware as Edge Function...');
+
+	const tmp = builder.getBuildDirectory('netlify-tmp');
+	const relativePath = posix.relative(tmp, builder.getServerDirectory());
+
+	builder.rimraf(tmp);
+	builder.mkdirp(tmp);
+	builder.mkdirp('.netlify/edge-functions');
+
+	builder.copy(`${files}/middleware.js`, `${tmp}/entry.js`, {
+		replace: {
+			MIDDLEWARE: `${relativePath}/middleware.js`,
+			CALL_MIDDLEWARE: `${relativePath}/call-middleware.js`
+		}
 	});
 
+	await bundle_edge_function({ builder, name: 'middleware' });
+}
+
+/**
+ *
+ * @param {object} params
+ * @param {import('@sveltejs/kit').Builder} params.builder
+ * @param {string} params.name
+ * @param {string[]} [params.excludedPaths]
+ */
+async function bundle_edge_function({ builder, name, excludedPaths = [] }) {
+	const tmp = builder.getBuildDirectory('netlify-tmp');
+
+	const relativePath = posix.relative(tmp, builder.getServerDirectory());
+	const manifest = builder.generateManifest({ relativePath });
 	writeFileSync(`${tmp}/manifest.js`, `export const manifest = ${manifest};\n`);
 
+	await esbuild.build({
+		entryPoints: [`${tmp}/entry.js`],
+		outfile: `.netlify/edge-functions/${name}.js`,
+		bundle: true,
+		format: 'esm',
+		platform: 'browser',
+		sourcemap: 'linked',
+		target: 'es2020',
+		loader: {
+			'.wasm': 'copy',
+			'.woff': 'copy',
+			'.woff2': 'copy',
+			'.ttf': 'copy',
+			'.eot': 'copy',
+			'.otf': 'copy'
+		},
+		// Node built-ins are allowed, but must be prefixed with `node:`
+		// https://docs.netlify.com/edge-functions/api/#runtime-environment
+		external: builtinModules.map((id) => `node:${id}`),
+		alias: Object.fromEntries(builtinModules.map((id) => [id, `node:${id}`]))
+	});
+
 	/** @type {{ assets: Set<string> }} */
-	const { assets } = (await import(`${tmp}/manifest.js`)).manifest;
+	const { assets } = (await import(pathToFileURL(`${tmp}/manifest.js`).href)).manifest;
 
 	const path = '/*';
 	// We only need to specify paths without the trailing slash because
@@ -151,7 +214,7 @@ async function generate_edge_functions({ builder }) {
 	const excludedPath = [
 		// Contains static files
 		`/${builder.getAppPath()}/*`,
-		...builder.prerendered.paths,
+		...excludedPaths,
 		...Array.from(assets).flatMap((asset) => {
 			if (asset.endsWith('/index.html')) {
 				const dir = asset.replace(/\/index\.html$/, '');
@@ -169,8 +232,11 @@ async function generate_edge_functions({ builder }) {
 	/** @type {HandlerManifest} */
 	const edge_manifest = {
 		functions: [
+			...(existsSync('.netlify/edge-functions/manifest.json')
+				? JSON.parse(readFileSync('.netlify/edge-functions/manifest.json', 'utf-8')).functions
+				: []),
 			{
-				function: 'render',
+				function: name,
 				path,
 				excludedPath
 			}
@@ -178,30 +244,9 @@ async function generate_edge_functions({ builder }) {
 		version: 1
 	};
 
-	await esbuild.build({
-		entryPoints: [`${tmp}/entry.js`],
-		outfile: '.netlify/edge-functions/render.js',
-		bundle: true,
-		format: 'esm',
-		platform: 'browser',
-		sourcemap: 'linked',
-		target: 'es2020',
-		loader: {
-			'.wasm': 'copy',
-			'.woff': 'copy',
-			'.woff2': 'copy',
-			'.ttf': 'copy',
-			'.eot': 'copy',
-			'.otf': 'copy'
-		},
-		// Node built-ins are allowed, but must be prefixed with `node:`
-		// https://docs.netlify.com/edge-functions/api/#runtime-environment
-		external: builtinModules.map((id) => `node:${id}`),
-		alias: Object.fromEntries(builtinModules.map((id) => [id, `node:${id}`]))
-	});
-
 	writeFileSync('.netlify/edge-functions/manifest.json', JSON.stringify(edge_manifest));
 }
+
 /**
  * @param { object } params
  * @param {import('@sveltejs/kit').Builder} params.builder
